version: '3.8'

services:
  # Base de datos PostgreSQL para staging
  postgres-staging:
    image: postgres:15
    container_name: monitoreo-postgres-staging
    environment:
      POSTGRES_DB: monitoreo_staging_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5433:5432"  # Puerto diferente para evitar conflictos
    volumes:
      - postgres_staging_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - monitoreo-staging-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Microservicio de Monitoreo para staging
  monitoreo-staging:
    build:
      context: ./monitoreo
      dockerfile: Dockerfile
    container_name: monitoreo-app-staging
    ports:
      - "8081:8080"  # Puerto diferente para staging
    environment:
      SPRING_PROFILES_ACTIVE: staging
      DATASOURCE_URL: jdbc:postgresql://postgres-staging:5432/monitoreo_staging_db
      DATASOURCE_USERNAME: postgres
      DATASOURCE_PASSWORD: postgres
      STAGING_USER: admin
      STAGING_PASSWORD: staging123
    depends_on:
      postgres-staging:
        condition: service_healthy
    networks:
      - monitoreo-staging-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus para staging
  prometheus-staging:
    image: prom/prometheus:latest
    container_name: monitoreo-prometheus-staging
    ports:
      - "9091:9090"  # Puerto diferente para staging
    volumes:
      - ./config/prometheus/prometheus-staging.yml:/etc/prometheus/prometheus.yml
      - prometheus_staging_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=100h'  # Menos retenci√≥n en staging
      - '--web.enable-lifecycle'
    networks:
      - monitoreo-staging-network
    depends_on:
      - monitoreo-staging

  # Loki para staging
  loki-staging:
    image: grafana/loki:latest
    container_name: monitoreo-loki-staging
    ports:
      - "3101:3100"  # Puerto diferente para staging
    volumes:
      - ./config/loki-config.yaml:/etc/loki/local-config.yaml
      - loki_staging_data:/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoreo-staging-network

  # Promtail para staging
  promtail-staging:
    image: grafana/promtail:latest
    container_name: monitoreo-promtail-staging
    volumes:
      - ./config/promtail-config.yaml:/etc/promtail/config.yml
      - ./monitoreo/logs:/var/log/monitoreo
    command: -config.file=/etc/promtail/config.yml
    networks:
      - monitoreo-staging-network
    depends_on:
      - loki-staging

  # Grafana para staging
  grafana-staging:
    image: grafana/grafana:latest
    container_name: monitoreo-grafana-staging
    ports:
      - "3001:3000"  # Puerto diferente para staging
    environment:
      GF_SECURITY_ADMIN_PASSWORD: staging123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_staging_data:/var/lib/grafana
      - ./config/grafana/provisioning:/etc/grafana/provisioning
      - ./config/grafana/dashboards:/var/lib/grafana/dashboards
    networks:
      - monitoreo-staging-network
    depends_on:
      - prometheus-staging
      - loki-staging

volumes:
  postgres_staging_data:
  prometheus_staging_data:
  loki_staging_data:
  grafana_staging_data:

networks:
  monitoreo-staging-network:
    driver: bridge 